! LINGO solver developed for the problem of production allocation and balancing in extruders;
! developer: Tatiana Balbi Fraga;

MODEL:
! Problem of Production Allocation and Balancing in Extruders;
! Starting to develop;

SETS:

DAYS;

EXTRUDERS:
	PRODUCTION_RATE, !(m/min);
	LENGTH, !(m);
	CAPACITY; !(min);

PRODUCTS:
	WIDTH, !(m);
	WEIGTH_RATIO, !(g/m2);
	UNIT_CONTRIBUTION, !($/g);
	INITIAL_INVENTORY,
	MAXIMUM_INVENTORY;
BATCHS:
	!USED,;
	PRODUCTION_TIME; !(min);

OUTLETS:
	MAXIMUM_TOTAL_OUTLET_INVENTORY;

PRODUCTS_PAIR (PRODUCTS, PRODUCTS) | &2 #GT# &1:
	RATIO;

PRODUCT_PER_DAY (PRODUCTS, DAYS): 
	PRODUCTION, !(g);
	INVENTORY, !(g);
	DEMAND, !(g);
	DELIVERED, !(g);
	UNMET_DEMAND; !(g);

PRODUCT_PER_BATCH (PRODUCTS, BATCHS): 
	BALANCING;

PRODUCT_PER_BATCH_PER_DAY (PRODUCTS, BATCHS, DAYS);

PRODUCT_PER_OUTLET (PRODUCTS, OUTLETS):
	MAXIMUM_OUTLET_INVENTORY;

PRODUCT_PER_OUTLET_PER_DAY (PRODUCTS, OUTLETS, DAYS):
	TRANSFER;

EXTRUDER_PER_DAY (EXTRUDERS, DAYS);

BATCH_PER_DAY (BATCHS, DAYS);

BATCH_PER_EXTRUDER (BATCHS, EXTRUDERS);

BATCH_PER_EXTRUDER_PER_DAY (BATCHS, EXTRUDERS, DAYS):
	ALLOCATION;

ENDSETS

DATA:

DAYS = @FILE('data.ldt');


EXTRUDERS = @FILE('data.ldt');
PRODUCTION_RATE = @FILE('data.ldt');
LENGTH = @FILE('data.ldt');
CAPACITY = @FILE('data.ldt');
SETUP_TIME = @FILE('data.ldt');
SETUP_COST = @FILE('data.ldt');
OPERATION_COST = @FILE('data.ldt');

PRODUCTS = @FILE('data.ldt');
WIDTH = @FILE('data.ldt');
WEIGTH_RATIO = @FILE('data.ldt');
UNIT_CONTRIBUTION = @FILE('data.ldt');
INITIAL_INVENTORY = @FILE('data.ldt');
MAXIMUM_INVENTORY = @FILE('data.ldt');
TOTAL_MAXIMUM_INVENTORY = @FILE('data.ldt');
INVENTORY_UNIT_COST = @FILE('data.ldt');
DEMAND = @FILE('data.ldt');
UNMET_COST = @FILE('data.ldt');
RATIO = @FILE('data.ldt');

BATCHS = @FILE('data.ldt');

OUTLETS = @FILE('data.ldt');
MAXIMUM_TOTAL_OUTLET_INVENTORY = @FILE('data.ldt');
MAXIMUM_OUTLET_INVENTORY = @FILE('data.ldt');

ENDDATA

CALC:

N_DAYS = @SIZE(DAYS);
N_EXTRUDERS = @SIZE(EXTRUDERS);
N_PRODUCTS = @SIZE(PRODUCTS);
N_BATCHS = @SIZE(BATCHS);
N_OUTLETS = @SIZE(OUTLETS);

!FACTOR = 1 / (N_BATCHS*N_EXTRUDERS*N_DAYS + N_PRODUCTS*N_BATCHS);

ENDCALC

! Objective function;

[Eq01] MAX =  PRODUCTION_GAIN - INVENTORY_COST - TOTAL_OPERATION_COST 
	- TOTAL_SETUP_COST - UNMET_DEMAND_COST !- ALL_COS;;

PRODUCTION_GAIN = @SUM(PRODUCT_PER_DAY(p,d): UNIT_CONTRIBUTION(p)*PRODUCTION(p,d));

INVENTORY_COST = @SUM(PRODUCT_PER_DAY(p,d): INVENTORY_UNIT_COST*INVENTORY(p,d));

TOTAL_OPERATION_COST = OPERATION_COST * @SUM(BATCH_PER_DAY(b,d): PRODUCTION_TIME(b));

TOTAL_SETUP_COST = SETUP_COST*SETUP_TIME*@SUM(BATCH_PER_EXTRUDER_PER_DAY(b,e,d): ALLOCATION(b,e,d));

UNMET_DEMAND_COST = UNMET_COST*@SUM(PRODUCT_PER_DAY(p,d): UNMET_DEMAND(p,d)); 

!ALL_COS = FACTOR*( @SUM(BATCH_PER_EXTRUDER_PER_DAY(b,e,d):ALLOCATION(b,e,d) )
	+ @SUM( PRODUCT_PER_BATCH(p,b): BALANCING(p,b) ) );

@FOR(PRODUCT_PER_DAY(p,d): [Eq02]
	PRODUCTION(p,d) -  @SUM( BATCH_PER_EXTRUDER(b,e): 
	BALANCING(p,b)*ALLOCATION(b,e,d)*WEIGTH_RATIO(p)*WIDTH(p)*PRODUCTION_RATE(e)*PRODUCTION_TIME(b) ) = 0 );

@FOR(BATCHS(b): [Eq03]
	@SUM(EXTRUDER_PER_DAY(e,d): ALLOCATION(b,e,d)) <= 1  );

@FOR(EXTRUDER_PER_DAY(e,d): [Eq04]
	@SUM( BATCHS(b): ALLOCATION(b,e,d) * (PRODUCTION_TIME(b)+SETUP_TIME) )  - CAPACITY(e) <= 0);

@FOR (PRODUCT_PER_DAY(p,d) |  d #GT# 1: [Eq05]
	INVENTORY(p,d) - INVENTORY(p, d-1) - PRODUCTION(p,d) + DELIVERED(p,d) + @SUM( OUTLETS(o): TRANSFER(p,o,d) ) = 0);

@FOR (PRODUCT_PER_DAY(p,d) |  d #EQ# 1: [Eq06]
	INVENTORY(p,d) - INITIAL_INVENTORY(p) - PRODUCTION(p,d) + DELIVERED(p,d) + @SUM( OUTLETS(o): TRANSFER(p,o,d) ) = 0);

@FOR (PRODUCT_PER_DAY(p,d) |  d #EQ# 1:
	UNMET_DEMAND(p,d) = DEMAND(p,d) - DELIVERED(p,d);
);

@FOR (PRODUCT_PER_DAY(p,d) |  d #GT# 1:
	UNMET_DEMAND(p,d) = UNMET_DEMAND(p,d-1) + DEMAND(p,d) - DELIVERED(p,d);
);

@FOR (PRODUCT_PER_DAY(p,d): [Eq07]
	INVENTORY(p,d) - MAXIMUM_INVENTORY(p) <= 0);

[Eq08] @SUM(PRODUCT_PER_DAY(p,d): INVENTORY(p,d)) <= TOTAL_MAXIMUM_INVENTORY;

@FOR(PRODUCT_PER_OUTLET(p,o): [Eq09]
	@SUM(DAYS(d):  TRANSFER(p,o,d)) <=  MAXIMUM_OUTLET_INVENTORY );

@FOR(OUTLETS(o): [Eq10]
	@SUM(PRODUCT_PER_DAY(p,d):  TRANSFER(p,o,d)) <=  MAXIMUM_TOTAL_OUTLET_INVENTORY );

@FOR (BATCH_PER_EXTRUDER_PER_DAY(b,e,d): [Eq11]
	@SUM(PRODUCTS(p): BALANCING(p,b)*ALLOCATION(b,e,d)*WIDTH(p) ) -  LENGTH(e) <= 0 );

@FOR(BATCH_PER_DAY(b,d): [Eq12]
	 @EXP( @LGM( @SUM( PRODUCTS(p): BALANCING(p,b)) + 1 ) - @LGM( 3) 
	- @LGM( @SUM( PRODUCTS(p): BALANCING(p,b)) - 1 ) ) 
	- @SUM( PRODUCTS_PAIR(p,i): BALANCING(p,b)*BALANCING(i,b)*RATIO(p,i) ) = 0 );

@FOR (PRODUCT_PER_BATCH(p,b):
	@BIN( BALANCING(p,b) ) );

@FOR (BATCH_PER_EXTRUDER_PER_DAY (b,e,d):
	@BIN( ALLOCATION(b,e,d) ) ;
);

@CARD('ALLOCATIONCARD', N_BATCHS);

@FOR (BATCH_PER_EXTRUDER_PER_DAY (b,e,d):
	@CARD('ALLOCATIONCARD', ALLOCATION(b,e,d));
);

END